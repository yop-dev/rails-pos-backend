{
	"info": {
		"_postman_id": "rails-pos-graphql-api",
		"name": "Rails POS GraphQL API - Complete Test Suite",
		"description": "Comprehensive test suite for Rails POS GraphQL backend API. Contains all 20 tests covering queries, mutations, error handling, and schema introspection.\n\n**Features Tested:**\n- Product & Category Management\n- Order Processing & Customer Management\n- Payment & Shipping Options\n- Error Handling & Validation\n- GraphQL Schema Introspection\n\n**Created by:** Rails POS Development Team\n**Version:** 1.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "📋 Query Tests",
			"item": [
				{
					"name": "Test 1: Product Categories ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { productCategories { id name position } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Fetches all product categories with their ID, name, and position."
					}
				},
				{
					"name": "Test 2: Products Query ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { products { id name description priceCents currency productType active } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Fetches all products with their details including price, type, and status."
					}
				},
				{
					"name": "Test 3: Products with Filter ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query($filter: ProductsFilterInput) { products(filter: $filter) { id name priceCents } }\",\n  \"variables\": {\n    \"filter\": {\n      \"categoryId\": \"5\",\n      \"active\": true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Filters products by category ID and active status."
					}
				},
				{
					"name": "Test 4: Orders Query ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { orders { id reference status totalCents createdAt } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Fetches all orders with their reference, status, total, and creation date."
					}
				},
				{
					"name": "Test 5: Specific Order by ID ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query($id: ID!) { order(id: $id) { id reference status totalCents } }\",\n  \"variables\": {\n    \"id\": \"2\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Fetches a specific order by its ID."
					}
				},
				{
					"name": "Test 6: Customers Search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query($search: CustomersSearchInput!) { customers(search: $search) { id firstName lastName email } }\",\n  \"variables\": {\n    \"search\": {\n      \"term\": \"john\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Searches for customers by name or other criteria."
					}
				},
				{
					"name": "Test 7: Payment Options ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { paymentOptions { code label convenienceFeeCents } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Fetches available payment methods with their fees."
					}
				},
				{
					"name": "Test 8: Shipping Options ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query($input: ShippingOptionsInput!) { shippingOptions(input: $input) { code label feeCents } }\",\n  \"variables\": {\n    \"input\": {\n      \"delivery\": {\n        \"line1\": \"123 Main St\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postalCode\": \"10001\",\n        \"country\": \"US\"\n      },\n      \"items\": [\n        {\n          \"productId\": \"12\",\n          \"quantity\": 2\n        }\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Calculates shipping options based on delivery address and items."
					}
				}
			],
			"description": "All query operations for fetching data from the GraphQL API."
		},
		{
			"name": "🔄 Mutation Tests",
			"item": [
				{
					"name": "Test 9: Create Product Category ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation($input: CreateCategoryInput!) { createCategory(input: $input) { category { id name position } errors { message } } }\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"Test Category 2\",\n      \"position\": 6\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Creates a new product category with name and position."
					}
				},
				{
					"name": "Test 10: Create Product ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation($input: CreateProductInput!) { createProduct(input: $input) { product { id name priceCents } errors { message } } }\",\n  \"variables\": {\n    \"input\": {\n      \"input\": {\n        \"name\": \"Test Product 2\",\n        \"description\": \"Another test product\",\n        \"categoryId\": \"5\",\n        \"priceCents\": 1800,\n        \"currency\": \"USD\",\n        \"productType\": \"PHYSICAL\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Creates a new product with all required details."
					}
				},
				{
					"name": "Test 11: Update Product ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation($input: UpdateProductInput!) { updateProduct(input: $input) { product { id name priceCents } errors { message } } }\",\n  \"variables\": {\n    \"input\": {\n      \"id\": \"12\",\n      \"input\": {\n        \"name\": \"Updated Product Name v2\",\n        \"priceCents\": 2200\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Updates an existing product's name and price."
					}
				},
				{
					"name": "Test 12: Create Order ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation($input: CreateOrderInput!) { createOrder(input: $input) { order { id reference totalCents } errors { message } } }\",\n  \"variables\": {\n    \"input\": {\n      \"input\": {\n        \"source\": \"IN_STORE\",\n        \"items\": [\n          {\n            \"productId\": \"12\",\n            \"quantity\": 1\n          }\n        ],\n        \"customer\": {\n          \"firstName\": \"Jane\",\n          \"lastName\": \"Smith\",\n          \"email\": \"jane.smith@example.com\",\n          \"phone\": \"555-5678\"\n        },\n        \"paymentMethodCode\": \"cash\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Creates a new order with customer information and order items."
					}
				},
				{
					"name": "Test 13: Confirm Order ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation($input: ConfirmOrderInput!) { confirmOrder(input: $input) { order { id reference status totalCents } errors { message } } }\",\n  \"variables\": {\n    \"input\": {\n      \"id\": \"2\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Confirms a pending order, changing its status to CONFIRMED."
					}
				}
			],
			"description": "All mutation operations for creating, updating, and managing data."
		},
		{
			"name": "❌ Error Handling Tests",
			"item": [
				{
					"name": "Test 14: Invalid Query ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { nonExistentField }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Tests error handling for non-existent fields. Should return field not found error."
					}
				},
				{
					"name": "Test 15: Missing Required Arguments ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { customers { id firstName } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Tests error handling for missing required arguments. Should return missing arguments error."
					}
				},
				{
					"name": "Test 16: Invalid Input Types ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation($input: CreateCategoryInput!) { createCategory(input: $input) { category { id } errors { message } } }\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"\",\n      \"position\": \"invalid\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Tests validation error handling with invalid input data. Should return validation errors."
					}
				}
			],
			"description": "Tests that verify proper error handling and validation."
		},
		{
			"name": "🔍 Schema Introspection Tests",
			"item": [
				{
					"name": "Test 17: Schema Types ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { __schema { types { name kind } } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Lists all available GraphQL types in the schema."
					}
				},
				{
					"name": "Test 18: Available Queries ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { __schema { queryType { fields { name type { name } } } } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Lists all available query fields and their return types."
					}
				},
				{
					"name": "Test 19: Available Mutations ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { __schema { mutationType { fields { name type { name } } } } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Lists all available mutation fields and their return types."
					}
				},
				{
					"name": "Test 20: Type Introspection ✅",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { __type(name: \\\"ProductsFilterInput\\\") { name inputFields { name type { name } } } }\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": ["{{baseUrl}}"],
							"path": ["graphql"]
						},
						"description": "Inspects a specific input type to see its available fields."
					}
				}
			],
			"description": "GraphQL schema introspection queries for exploring the API structure."
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}